package main

import (
    "fmt"
    "sync"
)

type Fetcher interface {
    // Fetch returns the body of URL and
    // a slice of URLs found on that page.
    Fetch(url string) (body string, urls []string, err error)
}

type cahcedUrls struct {
    urls map[string]string
    mu sync.Mutex
}

func (cache *cahcedUrls) get(key string) (string, bool) {
    cache.mu.Lock()
    defer cache.mu.Unlock()
    val, ok := cache.urls[key]
    return val, ok
}

func (cache *cahcedUrls) set(key, value string) {
    cache.mu.Lock()
    defer cache.mu.Unlock()
    cache.urls[key] = value
    return
}

// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string, depth int, fetcher Fetcher, cache *cahcedUrls, wg *sync.WaitGroup) {
    // TODO: Fetch URLs in parallel.
    // TODO: Don't fetch the same URL twice.
    // This implementation doesn't do either:
    defer wg.Done()
    if depth <= 0 {
	return
    }
    _, ok := cache.get(url)
    if ok {
	return
    }
    body, urls, err := fetcher.Fetch(url)
    if err != nil {
	cache.set(url, fmt.Sprintln(err))
	return
    }
    cache.set(url, fmt.Sprintf("found: %s %q\n", url, body))
    for _, u := range urls {
	wg.Add(1)
	go Crawl(u, depth-1, fetcher, cache, wg)
    }
    return
}

func main() {
    cache := cahcedUrls {
	urls: make(map[string]string),
    }
    
    var wg sync.WaitGroup

    wg.Add(1)
    go Crawl("https://golang.org/", 4, fetcher, &cache, &wg)
    wg.Wait()
    
    for _, v := range cache.urls {
	fmt.Print(v)
    }
	
}

// fakeFetcher is Fetcher that returns canned results.
type fakeFetcher map[string]*fakeResult

type fakeResult struct {
    body string
    urls []string
}

func (f fakeFetcher) Fetch(url string) (string, []string, error) {
    if res, ok := f[url]; ok {
	return res.body, res.urls, nil
    }
    return "", nil, fmt.Errorf("not found: %s", url)
}

// fetcher is a populated fakeFetcher.
var fetcher = fakeFetcher{
    "https://golang.org/": &fakeResult{
	"The Go Programming Language",
	[]string{
	    "https://golang.org/pkg/",
	    "https://golang.org/cmd/",
	},
    },
    "https://golang.org/pkg/": &fakeResult{
	"Packages",
	[]string{
	    "https://golang.org/",
	    "https://golang.org/cmd/",
	    "https://golang.org/pkg/fmt/",
	    "https://golang.org/pkg/os/",
	},
    },
    "https://golang.org/pkg/fmt/": &fakeResult{
	"Package fmt",
	[]string{
	    "https://golang.org/",
	    "https://golang.org/pkg/",
	},
    },
    "https://golang.org/pkg/os/": &fakeResult{
	"Package os",
	[]string{
	    "https://golang.org/",
	    "https://golang.org/pkg/",
	},
    },
}
